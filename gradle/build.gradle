apply plugin: 'java'
apply plugin: 'eclipse'

def eclipseProjectName = 'testapp'
def eclipseProjectComment = 'my test application'
def jarManifestMainClass = 'me.hatter.tools.xxx.Main'

archivesBaseName = 'testapp'
sourceCompatibility = 1.5
targetCompatibility = 1.5

task initapp << {
  file('lib').mkdirs()
  file('src/main/java').mkdirs()
  file('src/main/resources').mkdirs()
  file('src/test/java').mkdirs()
  file('src/test/resources').mkdirs()
  println 'Init app finished [lib, src/main/java|resources, src/test/java|resources].'
}

task install << {
  def installLib = 'testapp.lib'
  def installBinName = 'testappbin'
  def installBinDirLib = "testapp_lib"
  if (!file("/usr/local/bin/${installBinDirLib}").exists()) {
    file("/usr/local/bin/${installBinDirLib}").mkdirs()
  }
  copy {
    from installLib
    into "/usr/local/bin/${installBinDirLib}/"
  }
  copy {
    from installBinName
    into '/usr/local/bin/'
  }
  ant.chmod(file: "/usr/local/bin/${installBinName}", perm: 'a+x')
}

dependencies {
    runtime files(fileTree(dir: 'lib', includes: ['*.jar']))
}

eclipse {
  project {
    name = eclipseProjectName
    comment = eclipseProjectComment
  }
  classpath {
    defaultOutputDir = file('classes')
  }
}

jar {
  manifest {
    attributes('Main-Class': jarManifestMainClass)
  }
}

