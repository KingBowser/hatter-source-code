<html>
<head><title>show</title>
<script src="jquery/jquery.js"></script>
<script src="jquery/jquery.cookie.js"></script>

<script src="beautify.js"></script>
<script src="beautify-html.js"></script>
<script src="tests/sanitytest.js"></script>
<script src="tests/beautify-tests.js"></script>
<script src="unpackers/javascriptobfuscator_unpacker.js"></script>
<script src="unpackers/urlencode_unpacker.js"></script>
<script src="unpackers/p_a_c_k_e_r_unpacker.js"></script>
<script src="unpackers/myobfuscate_unpacker.js"></script>
<script>

var the = {
    beautify_in_progress: false
};

if (/chrome/.test(navigator.userAgent.toLowerCase())) {
    // this dummy function alleviates Chrome large string corruption by
    // probably shoveling the corruption bug to some other area
    //
    //   http://code.google.com/p/chromium/issues/detail?id=100409
    //   http://jsbeautifier.org/chrome-bug/

    String.prototype.old_charAt = String.prototype.charAt;
    String.prototype.charAt = function (n) { return this.old_charAt(n); }
}


function run_tests() {
    var st = new SanityTest();
    run_beautifier_tests(st);
    JavascriptObfuscator.run_tests(st);
    P_A_C_K_E_R.run_tests(st);
    Urlencoded.run_tests(st);
    MyObfuscate.run_tests(st);
    $('#testresults').html(st.results()).show();
}


function any(a, b) {
    return a || b;
}

function read_settings_from_cookie() {
    $('#tabsize').val(any($.cookie('tabsize'), '4'));
    $('#brace-style').val(any($.cookie('brace-style'), 'collapse'));
    $('#detect-packers').attr('checked', $.cookie('detect-packers') !== 'off');
    $('#preserve-newlines').attr('checked', $.cookie('preserve-newlines') !== 'off');
    $('#keep-array-indentation').attr('checked', $.cookie('keep-array-indentation') === 'on');
}

function store_settings_to_cookie() {
    var opts = { expires: 360 };
    $.cookie('tabsize', $('#tabsize').val(), opts);
    $.cookie('brace-style', $('#brace-style').val(), opts);
    $.cookie('detect-packers', $('#detect-packers').attr('checked') ? 'on' : 'off', opts);
    $.cookie('preserve-newlines', $('#preserve-newlines').attr('checked') ? 'on' : 'off', opts);
    $.cookie('keep-array-indentation', $('#keep-array-indentation').attr('checked') ? 'on' : 'off', opts);
}

function unpacker_filter(source) {
    var trailing_comments = '';
    var comment = '';
    var found = false;

    do {
        found = false;
        if (/^\s*\/\*/.test(source)) {
            found = true;
            comment = source.substr(0, source.indexOf('*/') + 2);
            source = source.substr(comment.length).replace(/^\s+/, '');
            trailing_comments += comment + "\n";
        } else if (/^\s*\/\//.test(source)) {
            found = true;
            comment = source.match(/^\s*\/\/.*/)[0];
            source = source.substr(comment.length).replace(/^\s+/, '');
            trailing_comments += comment + "\n";
        }
    } while (found);

    if (P_A_C_K_E_R.detect(source)) {
        source = unpacker_filter(P_A_C_K_E_R.unpack(source))
    }
    if (Urlencoded.detect(source)) {
        source = unpacker_filter(Urlencoded.unpack(source))
    }
    if (JavascriptObfuscator.detect(source)) {
        source = unpacker_filter(JavascriptObfuscator.unpack(source))
    }
    if (MyObfuscate.detect(source)) {
        source = unpacker_filter(MyObfuscate.unpack(source))
    }

    return trailing_comments + source;
}


function beautify() {
    if (the.beautify_in_progress) return;

    store_settings_to_cookie();

    the.beautify_in_progress = true;

    var source = $('#source').val();
    var indent_size = 4;
    var indent_char = indent_size == 1 ? '\t' : ' ';
    var preserve_newlines = true;
    var keep_array_indentation = false;
    var brace_style = "collapse";

    // if ($('#detect-packers').attr('checked')) {
        source = unpacker_filter(source);
    // }

    var comment_mark = '<-' + '-';
    var opts = {
                indent_size: indent_size,
                indent_char: indent_char,
                preserve_newlines:preserve_newlines,
                brace_style: brace_style,
                keep_array_indentation:keep_array_indentation,
                space_after_anon_function:true};

    if (source && source[0] === '<' && source.substring(0, 4) !== comment_mark) {
        $('#source').val(
            style_html(source, opts)
        );
    } else {
        var v = js_beautify(unpacker_filter(source), opts);
        $('#source').val(v);
    }

    the.beautify_in_progress = false;
}

function doUpdate(id) {
  jQuery.getScript("/x.jssp?jsspaction=resourceproxy.SetIsUpdate&id=" + id);
}

function doAsyncSave() {
  jQuery.post('/x.jssp?jsspaction=resourceproxy.AsynSave', jQuery("#saveSource").serialize(), function(d) {
    document.getElementById("asyncSaveMessage").innerHTML = d;
  });
}
</script>

</head>
<body>
  <h1>Show response</h1>
  <% var httpObject = app_context.get("httpObject"); %>
  <% if (httpObject == null) { %>
    Http object not found, or id is not assigned.
  <% } else { %>
    id: <%=httpObject.getId()%><br/>
    method: <%=httpObject.getMethod()%><br/>
    url: <%=httpObject.getUrl()%><br/>
    <% if (/image\/.*/.test(httpObject.getContentType())) { %>
      <img src="<%=httpObject.getUrl()%>" border="3" style="border-color: red;"/><br/>
    <% } %>
    access address: <%=httpObject.getAccessAddress()%><br/>
    status: <%=httpObject.getStatus()%><br/>
    status message: <%=httpObject.getStatusMessage()%><br/>
    content type: <%=httpObject.getContentType()%><br/>
    charset: <%=httpObject.getCharset()%><br/>
    encoding: <%=httpObject.getEncoding()%><br/>
    is updated: <span id="isUpdate"><%=httpObject.getIsUpdated()%></span> 
      <button style="width: 60px; height: 22px;" onclick="doUpdate(<%=httpObject.getId()%>);">UPDATE</button><br/>
    header: <br/><pre><%=httpObject.getHeader()%></pre>
    bytes: <br/>
    <textarea style="width: 100%; height: 80px;"><%=httpObject.getBytes()%></textarea><br/>
    <% if (app_context.get("isTextContentType") == true) { %>
    string: 
    <a href="?jsspaction=resourceproxy.Show&id=<%=app_context.get("id")%>&charset=UTF-8">UTF-8</a> &nbsp;
    <a href="?jsspaction=resourceproxy.Show&id=<%=app_context.get("id")%>&charset=GBK">GBK</a> &nbsp;
    <a href="?jsspaction=resourceproxy.Show&id=<%=app_context.get("id")%>&charset=GB2312">GB2312</a> &nbsp;
    <a href="?jsspaction=resourceproxy.Show&id=<%=app_context.get("id")%>&charset=UTF-16">UTF-16</a> &nbsp;
    <% if (stringUtil.isEmpty(httpObject.getCharset()) && stringUtil.isEmpty(app_context.get("charset"))) { %>
       <font style="color: red;">Charset was not assigned in the http response, try click the charset left.</font>
    <% } %>
    <% if (/.*(javascript)|(json).*/.test(httpObject.getContentType()) && stringUtil.isNotEmpty(httpObject.getString())) { %>
      <button onclick="beautify();" style="width: 60px; height: 22px;">Format</button> &nbsp;
    <% } %>
    <% if ((stringUtil.isNotEmpty(httpObject.getCharset()) || stringUtil.isNotEmpty(app_context.get("charset")))) { %>
      <button onclick="document.getElementById('saveSource').submit();" style="width: 60px; height: 22px; margin-top: 4px; margin-bottom: 4px;">Save</button> &nbsp;
      <button style="width: 100px; height: 22px;" onclick="doAsyncSave()">Async Save</button> <span id="asyncSaveMessage"></span> &nbsp; &nbsp;
    <% } %>
    <br/>
    <form id="saveSource" action="x.jssp?jsspaction=resourceproxy.Save" method="POST">
    <input type="hidden" name="id" value="<%=app_context.get("id")%>"/>
    <input type="hidden" name="charset" value="<%=app_context.get("charset")%>"/>
    <textarea name="source" id="source" style="width: 100%; height: 600px;"><%=httpObject.getString()%></textarea><br/>
    </form>
    <% } %>
  <% } %>
  <br/>
  <a href="#" onclick="window.close();">[Close]</a>
</body>
</html>


