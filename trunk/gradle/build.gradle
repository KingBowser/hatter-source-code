apply plugin: 'java'
apply plugin: 'eclipse'

task initapp << {
  file('lib').mkdirs()
  file('src/main/java').mkdirs()
  file('src/main/resources').mkdirs()
  file('src/test/java').mkdirs()
  file('src/test/resources').mkdirs()
  println 'Init app finished [lib, src/main/java|resources, src/test/java|resources].'
}

task install << {
  def installBinDir = 'testapp'
  def installBinName = 'testappbin'
  def installBinDirLib = "${installBinDir}_lib"
  println installBinDirLib
  if (!file("/usr/local/bin/${installBinDirLib}").exists()) {
    println "/usr/local/bin/${installBinDirLib} not exists."
  }
}

def eclipseProjectName = 'testapp'
def eclipseProjectComment = 'my test application'
def jarManifestMainClass = 'me.hatter.tools.xxx.Main'

archivesBaseName = 'testapp'
sourceCompatibility = 1.5
targetCompatibility = 1.5

dependencies {
    runtime files(fileTree(dir: 'lib', includes: ['*.jar']))
}

eclipse {
  project {
    name = eclipseProjectName
    comment = eclipseProjectComment
  }
  classpath {
    defaultOutputDir = file('classes')
  }
}

jar {
  manifest {
    attributes('Main-Class': jarManifestMainClass)
  }
}

