#summary Symmetric-key algorithms based HTTP auth.
#sidebar TableOfContents

=一种基于对称加密算法的HTTP安全身份验证方法=

==一、现状==
目前的登陆(即用户身份验证)一般都是基于HTTP或HTTPS实现，有一些也通过客户端MD5 Hash后发送到服务器端验证。

通过HTTPS传输用户身份和密钥的确是一种比较理想的方式，但有些网站可能无法提供HTTPS加密服务，那么本文将描述一种基于对称密码算法的HTTP案例身份验证方法。

==二、算法==
===0. 概念===
|| `RAND()` || 生成随机字符串 ||
|| `HASH(text)` || 一种Hash映射，如 `MD5, SHA1` 等 ||
|| `ENCRYPT(text, password)` || 通过 `password` 对 `text` 做对称加密 ||
|| `DECRYPT(encrypt, password)` || 通过 `password` 对 `encrypt` 做对称解密 ||

===1. 服务器端记录用户名与挑战的映射===
1.1 服务器端通过 `RAND()` 生成随机字符串 `STRRAND`，并通过某种方式让用户名和该字符串生成映射<br>
1.2 `ENCRYPT(STRRAND, HASH(user password))`加密字符串，即为服务器端向客户端发起的挑战<br>

===2. 客户端接受挑战===
2.1 客户端接收到数据器端返回的加密数据 `STRENCRYPT` 并解密 `STRDECRYPT = DECRYPT(STRENCRYPT, HASH(user password))`<br>

===3. 客户端回应挑战===
3.1 客户端将用户名和 `STRDECRYPT` 生成新的字符串 `STRRESPONSE`
3.2 `ENCRYPT(STRRESPONSE, HASH(user password))` 加密字符串，并发送到服务器端，回应挑战<br>

===4. 服务器端验证挑战===
4.1 服务器端得回应并解密 `STRRESPONSEDECRYPT = DECRYPT(STRRESPONSE, HASH(user password))`<br>
4.2 服务器端验证 `STRRESPONSEENCRYPT` 字符串是否正确，如果正确则验证成功<br>

==三、示例==
... ...

==四、限制==
 * 本方法仅限于身份验证，无法将本方法用于服务器端和客户端数据交互。
 * 对称加密算法存在被暴力破解的可能性，不宜选择KEY较短的加密算法。

 