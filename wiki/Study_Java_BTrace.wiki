#summary BTrace
#sidebar TableOfContents

==官方网站==
http://kenai.com/projects/btrace

BTrace2 http://kenai.com/projects/btrace/sources/btrace2/show

BTrace is a safe, dynamic tracing tool for the Java platform. BTrace can be used to dynamically trace a running Java program (similar to DTrace for OpenSolaris applications and OS). BTrace dynamically instruments the classes of the target application to inject tracing code ("bytecode tracing"). Tracing code is expressed in Java programming language. There is also integration with DTrace for the OpenSolaris platform.

BTrace脚本由至少一个 `public static void` 组成。

==原理介绍==
[http://docs.oracle.com/javase/6/docs/technotes/guides/instrumentation/index.html java.lang.instrument.Instrumentation]

==命令行==
{{{
btrace [-I <include-path>] [-p <port>] [-cp <classpath>] <pid> <btrace-script> [<args>]
}}}

==参数==
{{{
-Dcom.sun.btrace.probeDescPath=.
-Dcom.sun.btrace.dumpClasses=false
-Dcom.sun.btrace.debug=false
-Dcom.sun.btrace.unsafe=false

-Dcom.sun.btrace.trackRetransforms=false
-Dcom.sun.btrace.dumpDir=.
}}}

|| `bootClassPath` || boot classpath to be used ||
|| `systemClassPath` || system classpath to be used ||
|| `debug` || turns on verbose debug messages (true/false) ||
|| `unsafe` || do not check for btrace restrictions violations (true/false) ||
|| `dumpClasses` || dump the transformed bytecode to files (true/false) ||
|| `dumpDir` || specifies the folder where the transformed classes will be dumped to ||
|| `stdout` || redirect the btrace output to stdout instead of writing it to an arbitrary file (true/false) ||
|| `probeDescPath` || the path to search for probe descriptor XMLs ||
|| `script` || the path to a script to be run at the agent startup ||
|| `scriptdir` || the path to a directory containing scripts to be run at the agent startup ||
|| `scriptOutputFile` || the path to a file the btrace agent will store its output ||

==工具==
*生成简单BTrace的工具* http://hatter.me/js/btrace/

==示例==
打印所有调用 `String.intern()` 的堆栈日志：
{{{
import com.sun.btrace.AnyType;
import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;

@BTrace
public class Trace {

    @OnMethod(clazz = "/.*/", method = "/.*/", location = @Location(value = Kind.CALL, clazz = "java.lang.String", method = "intern"))
    public static void m0(@ProbeClassName String clazz, @ProbeMethodName String method, @TargetInstance Object instance) {
        println("\n==== java.lang.String#intern ====");
        jstack();
    }
}
}}}

=使用=

==Method Annotations==
|| `@com.sun.btrace.annotations.OnMethod` ||  ||
|| `@com.sun.btrace.annotations.OnTimer` ||  ||
|| `@com.sun.btrace.annotations.OnError` ||  ||
|| `@com.sun.btrace.annotations.OnExit` ||  ||
|| `@com.sun.btrace.annotations.OnEvent` ||  ||
|| `@com.sun.btrace.annotations.OnLowMemory` ||  ||
|| `@com.sun.btrace.annotations.OnProbe` ||  ||

==Argument Annotations==
|| `@com.sun.btrace.annotations.Self` || this对象，当非static函数调用时的this对象 ||
|| `@com.sun.btrace.annotations.Return` ||  ||
|| `@com.sun.btrace.annotations.ProbeClassName` ||  ||
|| `@com.sun.btrace.annotations.ProbeMethodName` ||  ||
|| `@com.sun.btrace.annotations.Duration` ||  ||
|| `@com.sun.btrace.annotations.TargetInstance` ||  ||
|| `@com.sun.btrace.annotations.TargetMethodOrField` ||  ||

当出现未打标记的参数时会通过对应类型的切面传递参数，当 *`AnyType[]`* 指定时，则会传入剩余的全部参数，传递的参数则依赖于 *`Location`*：
|| *`Kind.ENTRY, Kind.RETURN`* || the probed method arguments ||
|| *`Kind.THROW`* || the thrown exception ||
|| *`Kind.ARRAY_SET, Kind.ARRAY_GET`* || the array index ||
|| *`Kind.CATCH`* || the caught exception ||
|| *`Kind.FIELD_SET`* || the field value ||
|| *`Kind.LINE`* || the line number ||
|| *`Kind.NEW`* || the class name ||
|| *`Kind.ERROR`* || the thrown exception ||

===参考资料===
`[1].` http://kenai.com/projects/btrace/pages/UserGuide<br>
`[2].` http://docs.oracle.com/javase/6/docs/technotes/guides/instrumentation/index.html<br>
`[3].` http://kenai.com/projects/btrace/sources/btrace2/show<br>