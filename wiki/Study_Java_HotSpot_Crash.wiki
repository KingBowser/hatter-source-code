#summary Crash in Java, HotSpot
#sidebar TableOfContents

=`hs_err_pid*.log`=

Crash文件默认在当前路径下生成，也可以通过参数指定：
{{{
java -XX:ErrorFile=/var/log/java/java_error%p.log
}}}

产生该文件可能的错误：
 # The operating exception or signal that provoked the fatal error
 # Version and configuration information
 # Details on the thread that provoked the fatal error and thread's stack trace
 # The list of running threads and their state
 # Summary information about the heap
 # The list of native libraries loaded
 # Command line arguments
 # Environment variables
 # Details about the operating system and CPU

文件头格式：
{{{
#
# An unexpected error has been detected by Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x417789d7, pid=21139, tid=1024
#
# Java VM: Java HotSpot(TM) Client VM (1.6.0-rc-b63 mixed mode, sharing)
# Problematic frame:
# C  [libNativeSEGV.so+0x9d7]

#
# If you would like to submit a bug report, please visit:
#   http://java.sun.com/webapps/bugreport/crash.jsp
#

This example shows that the VM crashed on an unexpected signal. The next line describes the signal type, program counter
 (pc) that caused the signal, process ID and thread ID, as follows.

#  SIGSEGV (0xb) at pc=0x417789d7, pid=21139, tid=1024
      |      |           |             |         +--- thread id
      |      |           |             +------------- process id
      |      |           +--------------------------- program counter
      |      |                                        (instruction pointer)
      |      +--------------------------------------- signal number
      +---------------------------------------------- signal name
The next line contains the VM version (Client VM or Server VM), an indication whether the application was run in mixed
 or interpreted mode, and an indication whether class file sharing was enabled.

# Java VM: Java HotSpot(TM) Client VM (1.6.0-rc-b63 mixed mode, sharing)
The next information is the function frame that caused the crash, as follows.

# Problematic frame:
# C  [libNativeSEGV.so+0x9d7]
  |              +-- Same as pc, but represented as library name and offset.
  |                  For position-independent libraries (JVM and most shared
  |                  libraries), it is possible to inspect the instructions
  |                  that caused the crash without a debugger or core file
  |                  by using a disassembler to dump instructions near the
  |                  offset.
  +----------------- Frame type
In this example, the “C” frame type indicates a native C frame. The following table shows the possible frame types.
}}}

错误信号详见：[Study_OS_Linux_Signal]


|| `C`  ||本地C帧 ||
|| `j` || 解释的Java帧 ||
|| `V` || 虚拟机帧 ||
|| `v` || 虚拟机生成的存根栈帧 ||
|| `J` || 其他帧类型，包括编译后的Java帧 ||

===参考资料===
`[1].` http://rednaxelafx.iteye.com/blog/729214<br>
`[2].` http://hllvm.group.iteye.com/group/topic/34848<br>
`[3].` http://www.raychase.net/1459<br>
`[4].` http://www.oracle.com/technetwork/java/javase/felog-138657.html<br>