#summary HotSpot OutOfMemoryError解析

==HotSpot中OutOfMemoryError解析==

在JVM中内存一共有3种：Heap（堆内存），Non-Heap（非堆内存） ^[3]^和Native（本地内存）。

堆内存是运行时分配所有类实例和数组的一块内存区域。非堆内存包含方法区和JVM内部处理或优化所需的内存，存放有类结构（如运行时常量池、字段及方法结构，以及方法和构造函数代码）。本地内存是由操作系统管理的虚拟内存。当一个应用内存不足时就会抛出 `java.lang.OutOfMemoryError` 异常。

|| *问题* || *表象* || *诊断工具* ||
|| 内存不足 || `OutOfMemoryError` || `Java Heap Analysis Tool(jhat)` ^[4]^<br>`Eclipse Memory Analyzer(mat)` ^[5]^ ||
|| 内存泄漏 || 使用内存增长，频繁GC || `Java Monitoring and Management Console(jconsole)` ^[6]^<br>`JVM Statistical Monitoring Tool(jstat)` ^[7]^ ||
|| ` ` || 一个类有大量的实例 || `Memory Map(jmap) - "jmap -histo"` ^[8]^ ||
|| ` ` || 对象被误引用 || `jconsole` ^[6]^ 或 `jmap -dump + jhat` ^[8][4]^ ||
|| `Finalizers` || 对象等待结束 || `jconsole` ^[6]^ 或 `jmap -dump + jhat` ^[8][4]^ ||

当Java进程无法分配足够内存运行时将会抛出OutOfMemoryError：

====1. *`java.lang.OutOfMemoryError: Java heap space`*====
 堆内存溢出时，首先判断当前最大内存是多少（参数：`-Xmx` 或 `-XX:MaxHeapSize=`），可以通过命令 `jinfo -flag MaxHeapSize` ^[9]^查看运行中的JVM的配置，如果该值已经较大则应通过 mat ^[5]^ 之类的工具查找问题，或 `jmap -histo` ^[8]^查找哪个或哪些类占用了比较多的内存。参数`-verbose:gc(-XX:+PrintGC) -XX:+PrintGCDetails`可以打印GC相关的一些数据。如果问题比较难排查也可以通过参数`-XX:+HeapDumpOnOutOfMemoryError`在OOM之前Dump内存数据再进行分析。<br>
 下面代码可再现该异常：
 {{{
List<String> list = new ArrayList<String>();
while(true) list.add(new String("Consume more memory!"));
}}}

====2. *`java.lang.OutOfMemoryError: PermGen space`*====
 `PermGen space`即永久代，是非堆内存的一个区域。主要存放的数据是类结构及调用了`intern()`的字符串。
 {{{
List<Class<?>> classes = new ArrayList<Class<?>>();
while(true){
    MyClassLoader cl = new MyClassLoader();
    try{
        classes.add(cl.loadClass("Dummy"));
    }catch (ClassNotFoundException e) {
        e.printStackTrace();
    }
}
}}}
 下面是一个使用了`String.intern()`的例子：
 {{{
List<String> list = new ArrayList<String>();
int i=0;
while(true) list.add(("Consume more memory!"+(i++)).intern());
}}}
 你可以通过以下btrace脚本查找该类调用：
 {{{
import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;

@BTrace
public class StringInternTrace {

    @OnMethod(clazz = "/.*/", method = "/.*/",
              location = @Location(value = Kind.CALL, clazz = "java.lang.String", method = "intern"))
    public static void m(@ProbeClassName String pcm, @ProbeMethodName String probeMethod,
                         @TargetInstance Object instance) {
        println(strcat(pcm, strcat("#", probeMethod)));
        println(strcat(">>>> ", str(instance)));
    }
}
}}}

====3. *`java.lang.OutOfMemoryError: unable to create new native thread`*====
 在JVM中每启动一个线程都会分配一块本地内存，用于存放线程的调用栈，该空间仅在线程结束时释放。当没有足够本地内存创建线程时就会出现该错误。通过以下代码可以很容易再现该问题：
 {{{
 while(true){
    new Thread(new Runnable(){
        public void run() {
            try {
                Thread.sleep(60*60*1000);
            } catch(InterruptedException e) { }        
        }    
    }).start();
}
}}}

====4. *`java.lang.OutOfMemoryError: Direct buffer memory`*====
 即从Direct Memory分配内存失败，Direct Buffer对象不是分配在堆上，是在Direct Memory分配，且不被GC直接管理的空间（但Direct Buffer的Java对象是归GC管理的，只要GC回收了它的Java对象，操作系统才会释放Direct Buffer所申请的空间）。通过`-XX:MaxDirectMemorySize=`可以设置Direct内存的大小。 ^[10]^
 {{{
List<ByteBuffer> list = new ArrayList<ByteBuffer>();
while(true) list.add(ByteBuffer.allocateDirect(10000000)); 
 }}}

====5. *`java.lang.OutOfMemoryError: request <size> bytes for <reason>.`*====
 本地内存分配失败。一个应用的Java Native Interface(JNI)代码、本地库及Java虚拟机都从本地堆分配内存分配空间。当从本地堆分配内存失败时抛出OutOfMemoryError异常。例如：当物理内存及交换分区都用完后，再次尝试从本地分配内存时也会抛出OufOfMemoryError异常。


===参考资料===
`[1].` http://java.sun.com/developer/technicalArticles/J2SE/monitoring/<br>
`[2].` http://eyalsch.wordpress.com/2009/06/17/oome/<br>
`[3].` http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryType.html<br>
`[4].` http://docs.oracle.com/javase/6/docs/technotes/tools/share/jhat.html<br>
`[5].` http://www.eclipse.org/mat/<br>
`[6].` http://docs.oracle.com/javase/6/docs/technotes/tools/share/jconsole.html<br>
`[7].` http://docs.oracle.com/javase/6/docs/technotes/tools/share/jstat.html<br>
`[8].` http://docs.oracle.com/javase/6/docs/technotes/tools/share/jmap.html<br>
`[9].` http://docs.oracle.com/javase/6/docs/technotes/tools/share/jinfo.html<br>
`[10].` http://eyesmore.iteye.com/blog/1133335<br>

