#summary HotSpot Thread
#sidebar TableOfContents

==线程类型==
|| *`ThreadType`* || *说明* || *线程名* ||
|| `vm_thread` || VMThread || `VM Thread` ||
|| `cgc_thread` || Concurrent GC thread || `Concurrent Mark-Sweep GC Thread` ||
|| `pgc_thread` || Parallel GC thread || `GC task thread#%d (ParallelGC)` ||
|| `java_thread` || Java线程 || `-` ||
|| `compiler_thread` || 编译线程 || `-` ||
|| `watcher_thread` || 观察线程 || `-` ||

线程类的结构图：
{{{
Thread
|-- NamedThread
|   |-- VMThread
|   |-- ConcurrentGCThread
|   `-- WorkerThread
|       |-- GangWorker
|       `-- GCTaskThread
|-- JavaThread
`-- WatcherThread
}}}

==线程信息==
 * Java-level thread ID
 * Native thread ID

==HotSpot线程实例说明==
|| *线程实例名* || *线程类型* || *说明* ||
|| `Attach Listener` || ? || Attach Listener线程是负责接收到外部的命令，而对该命令进行执行的并且吧结果返回给发送者。通常我们会用一些命令去要求jvm给我们一些反馈信息，如：java -version、jmap、jstack等等。如果该线程在jvm启动的时候没有初始化，那么，则会在用户第一次执行jvm命令时，得到启动。 ||
|| `Signal Dispatcher` || ? || 前面我们提到第一个Attach Listener线程的职责是接收外部jvm命令，当命令接收成功后，会交给signal dispather线程去进行分发到各个不同的模块处理命令，并且返回处理结果。signal dispather线程也是在第一次接收外部jvm命令时，进行初始化工作。 ||
|| `CompilerThread0` || ? || 用来调用JITing，实时编译装卸class。通常，jvm会启动多个线程来处理这部分工作，线程名称后面的数字也会累加，例如：CompilerThread1 ||
|| `Concurrent Mark-Sweep GC Thread` || Native || 并发标记清除垃圾回收器（就是通常所说的CMS GC）线程，该线程主要针对于老年代垃圾回收。ps：启用该垃圾回收器，需要在jvm启动参数中加上：-XX:+UseConcMarkSweepGC ||
|| `DestroyJavaVM ` || ? || 执行main()的线程在main执行完后调用JNI中的jni_DestroyJavaVM()方法唤起DestroyJavaVM线程。   JVM在Jboss服务器启动之后，就会唤起DestroyJavaVM线程，处于等待状态，等待其它线程（java线程和native线程）退出时通知它卸载JVM。线程退出时，都会判断自己当前是否是整个JVM中最后一个非deamon线程，如果是，则通知DestroyJavaVM线程卸载JVM。<br>ps：<br>扩展一下：<br>1.如果线程退出时判断自己不为最后一个非deamon线程，那么调用thread->exit(false)，并在其中抛出thread_end事件，jvm不退出。<br>2.如果线程退出时判断自己为最后一个非deamon线程，那么调用before_exit()方法，抛出两个事件： 事件1：thread_end线程结束事件、事件2：VM的death事件。<br>然后调用thread->exit(true)方法，接下来把线程从active list卸下，删除线程等等一系列工作执行完成后，则通知正在等待的DestroyJavaVM线程执行卸载JVM操作。 ||
|| `Finalizer` || Java || 这个线程也是在main线程之后创建的，其优先级为10，主要用于在垃圾收集前，调用对象的finalize()方法；关于Finalizer线程的几点：<br>1)只有当开始一轮垃圾收集时，才会开始调用finalize()方法；因此并不是所有对象的finalize()方法都会被执行；<br>2)该线程也是daemon线程，因此如果虚拟机中没有其他非daemon线程，不管该线程有没有执行完finalize()方法，JVM也会退出；<br>3) JVM在垃圾收集时会将失去引用的对象包装成Finalizer对象（Reference的实现），并放入ReferenceQueue，由Finalizer线程来处理；最后将该Finalizer对象的引用置为null，由垃圾收集器来回收；<br>4) JVM为什么要单独用一个线程来执行finalize()方法呢？如果JVM的垃圾收集线程自己来做，很有可能由于在finalize()方法中误操作导致GC线程停止或不可控，这对GC线程来说是一种灾难； ||
|| `Gang worker#0` || Native || JVM用于做新生代垃圾回收（monir gc）的一个线程。#号后面是线程编号，例如：Gang worker#1 ||
|| `GC Daemon` || ? || GC Daemon线程是JVM为RMI提供远程分布式GC使用的，GC Daemon线程里面会主动调用System.gc()方法，对服务器进行Full GC。 其初衷是当RMI服务器返回一个对象到其客户机（远程方法的调用方）时，其跟踪远程对象在客户机中的使用。当再没有更多的对客户机上远程对象的引用时，或者如果引用的“租借”过期并且没有更新，服务器将垃圾回收远程对象。<br>不过，我们现在jvm启动参数都加上了-XX:+DisableExplicitGC配置，所以，这个线程只有打酱油的份了。 ||

===参考资料===
`[1].` https://gist.github.com/843622/<br>
`[2].` http://w19995.blog.51cto.com/6194463/1052618<br>