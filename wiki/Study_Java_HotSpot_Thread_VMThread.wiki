#summary VM_Thread of hotspot
#sidebar TableOfContents

{{{
class VM_Operation: public CHeapObj
}}}

[http://hatter-source-code.googlecode.com/svn/trunk/attachments/wiki/vm_operation_queues.png]

====safepoint介绍 ^[1]^====
safe point 顾明思意，就是安全点，当需要jvm做一些操作的时候，需要把当前正在运行的线程进入一个安全点的状态（也可以说停止状态），这样才能做一些安全的操作，比如线程的dump，堆栈的信息。

在jvm里面通常vm_thread（我们一直在谈论的做一些属于vm 份内事情的线程） 和cms_thread（内存回收的线程）做的操作，是需要将其他的线程通过调用`SafepointSynchronize::begin` 和 `SafepointSynchronize::end`来实现让其他的线程进入或者退出safe point 的状态。

====通常safepoint的有三种状态 ^[1]^====
|| `_not_synchronized` || 说明没有任何打断现在所有线程运行的操作，也就是vm thread, cms thread 没有接到操作的指令 ||
|| `_synchronizing` || vm thread,cms thread 接到操作指令，正在等待所有线程进入safe point ||
|| `_synchronized` || 所有线程进入safe point, vm thread, cms thread 可以开始指令操作 ||

{{{
enum Priorities {
   SafepointPriority, // Highest priority (operation executed at a safepoint)
   MediumPriority,    // Medium priority
   nof_priorities
};

enum Mode {
  _safepoint,       // blocking,        safepoint, vm_op C-heap allocated
  _no_safepoint,    // blocking,     no safepoint, vm_op C-Heap allocated
  _concurrent,      // non-blocking, no safepoint, vm_op C-Heap allocated
  _async_safepoint  // non-blocking,    safepoint, vm_op C-Heap allocated
};

enum VMOp_Type {
  VM_OPS_DO(VM_OP_ENUM)
  VMOp_Terminating
};
}}}

|| *VM_Operation* || *blocking* || *safepoint* || *详细说明* ||
|| `VM_Dummy` || `-` || `-` || 虚拟的VM operation，在循环双链表中作为第一个元素 ||
|| `VM_CMS_Operation` ||  ||  ||  ||
|| `VM_CMS_Initial_Mark` ||  ||  ||  ||
|| `VM_CMS_Final_Remark` ||  ||  ||  ||
|| `VM_CGC_Operation` ||  ||  ||  ||
|| `VM_GC_Operation` ||  ||  ||  ||
|| `VM_HeapDumper` ||  ||  || Dump内存到文件，以下情况会调用：<br>`*` OutOfMemoryError && `-XX:+HeapDumpOnOutOfMemoryError`<br>`*` Full GC && `-XX:+HeapDumpBeforeFullGC`<br>`*` Full GC && `-XX:+HeapDumpAfterFullGC`<br>`*` `HotSpotDiagnostic#dumpHeap`<br>`*` `HotSpotVirtualMachine#dumpHeap`(如通过命令：`jmap -dump`) ||
|| `VM_GenCollectFullConcurrent` ||  ||  ||  ||
|| `VM_G1CollectFull` ||  ||  ||  ||
|| `VM_G1CollectForAllocation` ||  ||  ||  ||
|| `VM_G1IncCollectionPause` ||  ||  ||  ||
|| `VM_ParallelGCFailedAllocation` ||  ||  ||  ||
|| `VM_ParallelGCFailedPermanentAllocation` ||  ||  ||  ||
|| `VM_ParallelGCSystemGC` ||  ||  ||  ||
|| `VM_GC_HeapInspection` ||  ||  || Dump内存Histogram到文件，以下情况会调用：<br>`* ` `kill -3`<br>`*` Full GC && `-XX:+PrintClassHistogramBeforeFullGC`<br>`*` Full GC && `-XX:+PrintClassHistogramAfterFullGC`<br>`*` `HotSpotVirtualMachine#heapHisto`(如通过命令：`jmap -histo`) ||
|| `VM_GenCollectForAllocation` ||  ||  ||  ||
|| `VM_GenCollectFull` ||  ||  ||  ||
|| `VM_GenCollectForPermanentAllocation` ||  ||  ||  ||
|| `VM_PopulateDumpSharedSpace` ||  ||  ||  ||
|| `VM_JNIFunctionTableCopier` ||  ||  ||  ||
|| `VM_GetOwnedMonitorInfo` ||  ||  ||  ||
|| `VM_GetObjectMonitorUsage` ||  ||  ||  ||
|| `VM_GetCurrentContendedMonitor` ||  ||  ||  ||
|| `VM_GetStackTrace` ||  ||  ||  ||
|| `VM_GetMultipleStackTraces` ||  ||  ||  ||
|| `VM_GetFrameCount` ||  ||  ||  ||
|| `VM_GetFrameLocation` ||  ||  ||  ||
|| `VM_EnterInterpOnlyMode` ||  ||  ||  ||
|| `VM_ChangeSingleStep` ||  ||  ||  ||
|| `VM_GetCurrentLocation` ||  ||  ||  ||
|| `VM_ChangeBreakpoints` ||  ||  ||  ||
|| `VM_RedefineClasses` ||  ||  ||  ||
|| `VM_GetOrSetLocal` ||  ||  ||  ||
|| `VM_HeapIterateOperation` ||  ||  ||  ||
|| `VM_HeapWalkOperation` ||  ||  ||  ||
|| `VM_EnableBiasedLocking` || `is_cheap_allocated?`<br>`non-blocking:`<br>`blocking` || `safepoint` ||  ||
|| `VM_RevokeBias` ||  ||  || 取消偏向锁，如计算HashCode，锁竞争等 ||
|| `VM_BulkRevokeBias` ||  ||  ||  ||
|| `VM_ThreadStop` ||  ||  ||  ||
|| `VM_ForceSafepoint` ||  ||  ||  ||
|| `VM_ForceAsyncSafepoint` ||  ||  ||  ||
|| `VM_Deoptimize` ||  ||  ||  ||
|| `VM_DeoptimizeFrame` ||  ||  ||  ||
|| `VM_HandleFullCodeCache` ||  ||  ||  ||
|| `VM_DeoptimizeAll` ||  ||  ||  ||
|| `VM_ZombieAll` ||  ||  ||  ||
|| `VM_Verify` ||  ||  ||  ||
|| `VM_PrintThreads` ||  ||  ||  ||
|| `VM_PrintJNI` ||  ||  ||  ||
|| `VM_FindDeadlocks` ||  ||  ||  查找死锁线程 ||
|| `VM_ThreadDump` ||  ||  ||  ||
|| `VM_Exit` ||  ||  || 退出JVM  ||
|| `VM_DeoptimizeTheWorld` ||  ||  ||  ||
|| `VM_ReportJavaOutOfMemory` ||  ||  || 在OOM时执行Shell命令，通过参数`-XX:OnOutOfMemoryError=`设置 ||

===参将资料===
`[1].` http://blog.csdn.net/raintungli/article/details/7162468<br>