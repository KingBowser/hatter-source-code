#summary Java工程师的学习列表
#sidebar TableOfContents

=`Java`工程师的学习列表=

==一、`Java`基础知识==
 # 看一下以下类的源代码
  * `java.lang.String`
  * `java.lang.Enum`
  * `java.math.BigDecimal`
  * `java.lang.ThreadLocal`
  * `java.lang.ClassLoader` & `java.net.URLClassLoader`
  * `java.util.ArrayList & java.util.LinkedList`
  * `java.util.HashMap & java.util.LinkedHashMap & java.util.TreeMap`
  * `java.util.HashSet & java.util.LinkedHashSet & java.util.TreeSet`
 # 浏览一下以下类的接口及说明
  * `java.io.*`
  * `java.lang.*`
  * `java.lang.management.*`
  * `java.lang.ref.*`
  * `java.lang.reflect.*`
  * `java.util.*`
  * `java.net.*`
 # Java实现对Array/List排序
  * `java.uti.Arrays.sort()`
  * `java.util.Collections.sort()`
 # Java实现对List去重
 # Java实现对List去重，并且需要保留数据原始的出现顺序
 # Java实现通过正则表达式提取一段文本中的电子邮件，并将 `@` 替换为 `#` 输出
 # 学习使用常用的Java工具库
  * `commons.lang, commons.*, ...`
  * `guava-libraries`
  * `netty`
 # 什么是 API & SPI ？
  * http://en.wikipedia.org/wiki/Application_programming_interface
  * http://en.wikipedia.org/wiki/Service_provider_interface
 # 学习使用Java工具
  * `jps, jstack, jmap, jconsole, jinfo, jhat, javap, ...`
  * http://kenai.com/projects/btrace
  * http://www.crashub.org/
  * https://github.com/taobao/TProfiler
  * https://github.com/CSUG/HouseMD
  * http://wiki.cyclopsgroup.org/jmxterm
  * https://github.com/jlusdy/TBJMap
 # 学习Java诊断工具
  * http://www.eclipse.org/mat/
  * http://visualvm.java.net/oqlhelp.html

====相关资料====
`[1].` JDK src.zip 源代码<br>
`[2].` http://commons.apache.org/<br>
`[3].` https://code.google.com/p/guava-libraries/<br>
`[4].` http://netty.io/<br>
`[5].` http://stackoverflow.com/questions/2954372/difference-between-spi-and-api<br>
`[6].` http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java<br>

==二、`Java`并发编程==
 # Java内存模型是什么？
  * http://www.jcp.org/en/jsr/detail?id=133
 # synchronized的作用是什么？
 # volatile的作用是什么？
 # 以下代码是不是线程安全？为什么？如果为count加上volatile修饰是否能够做到线程安全？你觉得该怎么做是线程安全的？
{{{
public class Sample {
  private static int count = 0;

  public static void increment() {
    count++;
  }
}
}}}
 # 学会使用 `java.uti.concurrent.**`
  * `java.util.concurrent.locks.ReentrantLock`
  * `java.util.concurrent.locks.ReentrantReadWriteLock`
  * `java.util.concurrent.atomic.Atomic*`
  * `java.util.concurrent.ConcurrentHashMap`
  * `java.util.concurrent.Executors`
  * `...`
 # 解释一下下面两段代码的差别：

{{{
// 代码1
public class Sample {
  private static int count = 0;

  synchronized public static void increment() {
    count++;
  }
}

// 代码2
public class Sample {
  private static AtomicInteger count = new AtomicInteger(0);

  public static void increment() {
    count.getAndIncrement();
  }
}
}}}

====相关资料====
`[1].` http://www.cs.umd.edu/~pugh/java/memoryModel/<br>
`[2].` http://gee.cs.oswego.edu/dl/jmm/cookbook.html<br>
`[3].` http://book.douban.com/subject/10484692/<br>
`[4].` http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html<br>

==三、`Java`底层知识==
 # 学习了解字节码、class文件格式
  * http://en.wikipedia.org/wiki/Java_class_file
  * http://en.wikipedia.org/wiki/Java_bytecode
  * http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings
 # 写一个程序要求实现javap的功能（手工完成，不借助ASM等工具）
{{{
如Java源代码：
  public static void main(String[] args) {
    int i = 0;
    i += 1;
    i *= 1;
    System.out.println(i);
  }

编译后读取class文件输出以下代码：
public static void main(java.lang.String[]);
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	iconst_0
   1:	istore_1
   2:	iinc	1, 1
   5:	iload_1
   6:	iconst_1
   7:	imul
   8:	istore_1
   9:	getstatic	#2; //Field java/lang/System.out:Ljava/io/PrintStream;
   12:	iload_1
   13:	invokevirtual	#3; //Method java/io/PrintStream.println:(I)V
   16:	return
  LineNumberTable: 
   line 4: 0
   line 5: 2
   line 6: 5
   line 7: 9
   line 8: 16
}}}
 # 使用CGLIB做一个AOP程序
  * http://cglib.sourceforge.net/
 # 使用ASM实现上述CGLIB实现的功能
  * http://asm.ow2.org/

====相关资料====
`[1].` http://book.douban.com/subject/1138768/<br>
`[2].` http://book.douban.com/subject/6522893/<br>
`[3].` http://en.wikipedia.org/wiki/Java_class_file<br>
`[4].` http://en.wikipedia.org/wiki/Java_bytecode<br>
`[5].` http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings<br>
`[6].` http://asm.ow2.org/<br>
`[7].` http://cglib.sourceforge.net/<br>

==四、网络编程知识==
 # 用Java写一个简单的表态文件的HTTP服务器
  * 实现客户端缓存功能，支持返回304
  * 实现可并发下载一个文件
  * 使用线程池处理客户端请求
  * 使用nio处理客户端请求
  * 支持简单的rewrite规则
  * _*上述功能在实现的时候需要满足“开闭原则”*_
 # 了解 `nginx` 和 `apache` 服务器的特性并搭建一个对应的服务器
  * http://nginx.org/
  * http://httpd.apache.org/
 # 用Java实现FTP、SMTP协议
 # 什么是CDN？如果实现？DNS起到什么作用？
  * 搭建一个DNS服务器
  * 搭建一个 `Squid` 或 `Apache Traffic Server` 服务器
   * http://www.squid-cache.org/
   * http://trafficserver.apache.org/

====相关资料====
`[1].` http://www.ietf.org/rfc/rfc2616.txt<br>
`[2].` http://tools.ietf.org/rfc/rfc5321.txt<br>
`[3].` http://en.wikipedia.org/wiki/Open/closed_principle<br>

==五、网络安全知识==
 # 什么是DES、AES？
 # 什么是RSA、DSA？
 # 什么是MD5，SHA1？
 # 什么是SSL、TLS，为什么HTTPS相对比较安全？
 # 什么是中间人攻击、如果避免中间人攻击？
 # 什么是DOS、DDOS、CC攻击？
 # 什么是CSRF攻击？
 # 什么是CSS攻击？
 # 什么是SQL注入攻击？
 # 什么是Hash碰撞拒绝服务攻击？
 # 了解并学习下面几种增强安全的技术
  * http://www.openauthentication.org/
   * `HOTP`  http://www.ietf.org/rfc/rfc4226.txt
   * `TOTP` http://tools.ietf.org/rfc/rfc6238.txt
   * `OCRA` http://tools.ietf.org/rfc/rfc6287.txt
  * http://en.wikipedia.org/wiki/Salt_(cryptography)
 # 用openssl签一个证书部署到apache或nginx

====相关资料====
`[1].` http://en.wikipedia.org/wiki/Cryptographic_hash_function<br>
`[2].` http://en.wikipedia.org/wiki/Block_cipher<br>
`[3].` http://en.wikipedia.org/wiki/Public-key_cryptography<br>
`[4].` http://en.wikipedia.org/wiki/Transport_Layer_Security<br>
`[5].` http://www.openssl.org/<br>
`[6].` https://code.google.com/p/google-authenticator/<br>

==六、`JavaScript`知识==
 # 什么是prototype？
 # 什么是闭包？
 # 用jQuery写个程序
 # 用node.js写个程序

====相关资料====
`[1].` http://www.ecmascript.org/<br>

==七、编译原理知识==
 # 用Java实现以下表达式解析并返回结果（语法和Oracle中的`select sysdate-1 from dual`类似）：
{{{
 sysdate
 sysdate - 1
 sysdate - 1/24
 sysdate - 1/(12*2)
}}}
 # 实现对一个List通过DSL筛选
{{{
  QList<Map<String, Object>> mapList = new QList<Map<String, Object>>;
  mapList.add({"name": "hatter test"});
  mapList.add({"id": -1,"name": "hatter test"});
  mapList.add({"id": 0, "name": "hatter test"});
  mapList.add({"id": 1, "name": "test test"});
  mapList.add({"id": 2, "name": "hatter test"});
  mapList.add({"id": 3, "name": "test hatter"});
  mapList.query("id is not null and id > 0 and name like '%hatter%'");

要求返回列表中匹配的对象，即最后两个对象；
}}}
 # 用Java实现以下程序（语法和变量作用域处理都和JavaScript类似）：
{{{
代码：
var a = 1;
var b = 2;
var c = function() {
  var a = 3;
  println(a);
  println(b);
};
c();
println(a);
println(b);

输出：
3
2
1
2
}}}

====相关资料====
`[1].` http://en.wikipedia.org/wiki/Abstract_syntax_tree<br>
`[2].` https://javacc.java.net/<br>
`[3].` http://www.antlr.org/<br>

==八、数据库知识==
 # 关系型数据库
  * MySQL
   * 如何看执行计划？
   * 如何搭建MySQL主备？
   * binlog是什么？
  * Derby, H2, PostgreSQL （任选一个）
  * SQLite
 # 图数据库
  * neo4j
 # 宽表数据库
  * Cassandra
  * HBase

====相关资料====
`[1].` http://db-engines.com/en/ranking<br>

==九、其他知识==
 # 学习使用git
  * https://github.com/
  * https://git.oschina.net/
 # 学习使用gradle
  * http://www.gradle.org/

====相关资料====
`[1].` http://git-scm.com/<br>

==十、综合应用==
 # 参考node.js用Java实现一个 :)

====相关资料====
`[1].` _以上大部分相关资料_<br>