#summary TLS Secure TCP/HTTP
#sidebar TableOfContents

{{{
sudo openssl req -new -x509 -days 3650 -nodes -out cert.pem -keyout key.pem

* openssl req -new
用 OpenSSL 套件生成新的证书请求
* -x509
使用 X.509（PEM 编码的一种实现）
* -days 3650
有效期是十年，可以自己改
* -nodes
这个不是英文单词 “nodes”，而是 “No DES” 的意思，代表不用 DES 加密私钥，否则私钥默认是用 DES 加密的，每次启动 Apache 要输入密码
* -out
证书（包括证书信息和公钥）的文件名
* -keyout
私钥的文件名，如果此项和上一项同名的话，那么公钥和私钥是合并在同一文件里的（正如上面所贴的）

执行这个命令会让你输入一系列信息，比如 Common Name (CN)、公司名、地理位置、联系方式等，除了 CN 必须要和网站域名匹配之外，其他可以按照你的喜好自由填写……
}}}

----
在Go语言中使用HTTPS：
{{{
import (
	"log"
	"net/http"
)

func handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("This is an example server.\n"))
}

func main() {
	http.HandleFunc("/", handler)
	log.Printf("About to listen on 10443. Go to https://127.0.0.1:10443/")
	err := http.ListenAndServeTLS(":10443", "cert.pem", "key.pem", nil)
	if err != nil {
		log.Fatal(err)
	}
}
}}}

----
With wget : OpenSSL: error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error

With curl : curl: (35) error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error


In wget, this can be fixed by specifying --secure-protocol=sslv3 option

In curl, this can be fixed by specifying -sslv3 option

----
{{{
wget --secure-protocol=sslv3 --no-check-certificate <URL>
curl -sslv3 -k <URL>
}}}

===参考资料===
`[1].` https://wzyboy.im/post/799.html<br>
`[2].` http://golang.org/pkg/net/http/#ListenAndServeTLS<br>