#summary Java edition TOP.
#sidebar TableOfContents

= 概要 =

Java版的`top`工具。

= 如何使用 =

获得jtop:
{{{
wget https://hatter-source-code.googlecode.com/svn/trunk/jtop/jtop.jar
}}}

使用帮助: 
{{{
$ java -jar jtop.jar 
[ERROR] pid is not assigned.
Usage[b121209]:
java -jar jtop.jar [options] <pid> [<interval> [<count>]]
-OR-
java -cp jtop.jar jtop [options] <pid> [<interval> [<count>]]
    -size <B|K|M|G|H>             Size, case insensitive (default: B, H for human)
    -thread <N>                   Thread Top N (default: 5)
    -stack <N>                    Stacktrace Top N (default: 8)
    -excludes                     Excludes (string.contains)
    -includes                     Includes (string.contains, excludes than includes)
    --color                       Display color (default: off)
    --sortmem                     Sort by memory allocted (default: off)
    --summaryoff                  Do not display summary (default: off)
    --advanced                    Do display like 'top' (default: off)

}}}

使用下面命令得到eclipse的top信息:
{{{
$ java -jar jtop.jar -size h -thread 3 -stack 4 387
}}}

你将会看到以下信息:
{{{
NEW ROUND ================================================== 
Heap Memory: INIT=40.00M  USED=145.16M  COMMITED=278.57M  MAX=379.88M
NonHeap Memory: INIT=23.19M  USED=74.11M  COMMITED=118.62M  MAX=304.00M
GC ParNew  VALID  [Par Eden Space, Par Survivor Space]  GC=103  GCT=1532
GC ConcurrentMarkSweep  VALID  [Par Eden Space, Par Survivor Space, CMS Old Gen, CMS Perm Gen]  GC=7  GCT=75
ClassLoading LOADED=8776  TOTAL_LOADED=8780  UNLOADED=4
Total threads: 24  CPU=30 (1.49%)  USER=21 (1.09%)
NEW=0  RUNNABLE=7  BLOCKED=0  WAITING=10  TIMED_WAITING=7  TERMINATED=0  
main  TID=1  STATE=RUNNABLE  CPU_TIME=20 (1.03%)  USER_TIME=13 (0.68%)
	org.eclipse.swt.internal.cocoa.OS.objc_msgSend_bool(Native Method)
	org.eclipse.swt.internal.cocoa.NSRunLoop.runMode(NSRunLoop.java:42)
	org.eclipse.swt.widgets.Display.sleep(Display.java:4193)
	org.eclipse.ui.application.WorkbenchAdvisor.eventLoopIdle(WorkbenchAdvisor.java:364)

RMI TCP Connection(2)-10.18.214.175  TID=102  STATE=RUNNABLE  CPU_TIME=9 (0.45%)  USER_TIME=8 (0.40%)
	sun.management.ThreadImpl.dumpThreads0(Native Method)
	sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:433)
	me.hatter.tools.jtop.rmi.RmiServer.listThreadInfos(RmiServer.java:104)
	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

Poller SunPKCS11-Darwin  TID=11  STATE=TIMED_WAITING  CPU_TIME=0 (0.01%)  USER_TIME=0 (0.00%)
	java.lang.Thread.sleep(Native Method)
	sun.security.pkcs11.SunPKCS11$TokenPoller.run(SunPKCS11.java:692)
	java.lang.Thread.run(Thread.java:680)
}}}

你也可以使用参数`--A`或`--advanced`像top一样输出:
{{{
$ java -jar jtop.jar --A --C 387
-OR-
$ java -jar jtop.jar ---AC 387
}}}
[http://hatter-source-code.googlecode.com/svn/trunk/attachments/jtop/new_jtop.png]

= 原理介绍 =
 # 通过[http://docs.oracle.com/javase/6/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html VirtualMachine].loadAgent加载JTopMXBean及其实现到JVM中
 # 通过[http://docs.oracle.com/javase/6/docs/technotes/guides/management/agent.html 本地JMX]连接到需要查看的JVM
 # 处理并排序输出内容
详细参见: [HowDoesJtopWork]

